apiVersion: v1
kind: PersistentVolume
metadata:
  name: tomcatwas-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: manual
  hostPath:
    path: /mnt/data/tomcat
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tomcatwas-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: manual
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcatwas-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tomcatwas
  template:
    metadata:
      labels:
        app: tomcatwas
    spec:
      nodeSelector:
        nodegroup-type: "backend-workloads"
      containers:
        - name: tomcatwas
          image: tomcat:latest
          volumeMounts:
            - name: website-content
              mountPath: /usr/local/tomcat/webapps/index.html
              subPath: index.html
            - name: mysql-content
              mountPath: /usr/local/tomcat/webapps/mysql.jsp
              subPath: mysql.jsp
            - name: main-content
              mountPath: /usr/local/tomcat/webapps/main.html
              subPath: main.html
      volumes:
        - name: website-content
          configMap:
            name: init-tomcatwas-config
            items:
              - key: "index.html"
                path: "index.html"
        - name: mysql-content
          configMap:
            name: init-tomcatwas-config
            items:
              - key: "mysql.jsp"
                path: "mysql.jsp"
        - name: main-content
          configMap:
            name: init-tomcatwas-config
            items:
              - key: "main.html"
                path: "main.html"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-tomcatwas-config
  labels:
    app: tomcat
    environment: production
  annotations:
    description: "ConfigMap for Tomcat WAS deployment"
    version: "1.0"
data:
  index.html: |
    <html><body><h1>Welcome to Tomcatwas</h1></body></html>
  mysql.jsp: |
    <%@ page import="java.sql.*" %>
    <html>
    <body>
      <h1>MySQL Connection</h1>
      <% 
        String url = "jdbc:mysql://a823b770f427d4ce3b450fb6aa5fbc20-1608e95f024f91e3.elb.ap-northeast-2.amazonaws.com:3306/pratice_board;
        String username = "${DB_USER}";
        String password = "${DB_PASSWORD}";
        
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(url, username, password);
            String query = "SELECT * FROM member";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            
            while (rs.next()) {
                out.println("Data: " + rs.getString("name") + "<br>");
            }
        } catch (Exception ex) {
            out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                out.println("Error closing resources: " + e.getMessage());
            }
        }
      %>
    </body>
    </html>
  main.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Tennis Market</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                text-align: center;
                padding: 20px;
            }
            h1 {
                font-size: 2em;
            }
            .product-container {
                display: flex;
                justify-content: center;
                gap: 20px;
                margin-top: 20px;
            }
            .product {
                text-align: center;
            }
            .product img {
                width: 100px;
                height: 100px;
            }
            .order-button {
                display: block;
                margin-top: 10px;
                padding: 5px 10px;
                font-size: 1em;
            }
            .order-list-link {
                color: purple;
                text-decoration: none;
            }
        </style>
    </head>
    <body>
        <h1>Tennis Market</h1>
        <p>Welcome to Tennis Market!<br>Enjoy your shopping.</p>
        <p><a href="/orderlist.html" class="order-list-link">order list</a></p>
        
        <div class="product-container">
            <div class="product">
                <img src="/images/redRacket.png" alt="Red Racket">
                <p>Red Racket</p>
                <button class="order-button">order</button>
            </div>
            <div class="product">
                <img src="/images/blueRacket.png" alt="Blue Racket">
                <p>Blue Racket</p>
                <button class="order-button">order</button>
            </div>
            <div class="product">
                <img src="/images/blackRacket.png" alt="Black Racket">
                <p>Black Racket</p>
                <button class="order-button">order</button>
            </div>
        </div>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: tomcatwas-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"
    service.beta.kubernetes.io/aws-load-balancer-security-groups: "${aws_security_group.PRI-SG.id}"
spec:
  selector:
    app: tomcatwas
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: LoadBalancer

